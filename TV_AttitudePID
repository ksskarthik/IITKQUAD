#include "FreeSixIMU.h"
#include "FIMU_ADXL345.h"
#include "FIMU_ITG3200.h"
#include "Wire.h"
#include "PinChangeInt1.h"
#include "Servo.h"
//////////////////////////////////////////////////////////////////////////////////////////
#define XAXIS 0
#define YAXIS 1
#define ZAXIS 2

#define RATE_XAXIS_PID_IDX 0
#define RATE_YAXIS_PID_IDX 1
#define ZAXIS_PID_IDX 2
#define ATTITUDE_XAXIS_PID_IDX 3
#define ATTITUDE_YAXIS_PID_IDX 4
#define ATTITUDE_GYRO_XAXIS_PID_IDX 5
#define ATTITUDE_GYRO_YAXIS_PID_IDX 6

#define YAW_DIRECTION 1

#define ATTITUDE_SCALING (0.75 * PWM2RAD)
#define PWM2RAD 0.002 

///////////////////////////////////////////////////////////////////////////////////////////////////
int flag=0;
Servo motor[4];

unsigned long previousTime = 0;
unsigned long currentTime = 0;
unsigned long deltaTime = 0;

float motorAxisCommandRoll = 0;        
float motorAxisCommandPitch = 0;
float motorAxisCommandYaw = 0;

boolean inFlight = true;                                           // true when motor are armed and that the user pass one time the min throttle

/////////////////////////////////////////////////////////////////////////////////////////////////////
struct PIDdata
{
  float P, I, D;
  float lastError;
  float previousPIDTime;
  float integratedError;
  float windupGuard;
} PID[5];

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Reciever
#define DEBUG_RECEIVER

#define AILERON  0   //roll
#define ELEVATOR 1   //pitch
#define THROTTLE 2
#define RUDDER   3   //yaw

#define AILERON_IN  10          // These are the pins configured for the receiver
#define ELEVATOR_IN 11
#define THROTTLE_IN 12
#define RUDDER_IN   13

uint8_t rc_pins[4] = {AILERON_IN, ELEVATOR_IN, THROTTLE_IN, RUDDER_IN};
uint8_t rc_flags[4] = {1, 2, 4, 8};
uint16_t rc_values[4] = {0, 0, 0, 0};

volatile uint8_t rc_shared_flags;
volatile uint16_t rc_shared_values[4];
volatile uint32_t rc_shared_ts[4];

float receiverZero[3] = {1492,1638,1368};   //Mean Transmitter values Aileron Elevator Rudder // Generate command to intialize mean values

void rc_channel_change(uint8_t id) {
  if (digitalRead(rc_pins[id]) == HIGH) {
    rc_shared_ts[id] = micros();
  }
  else {
    rc_shared_values[id] = (uint16_t)(micros() - rc_shared_ts[id]);
    rc_shared_flags |= rc_flags[id];
  }
}

void rc_aileron_change()  { rc_channel_change(AILERON);  }
void rc_elevator_change() { rc_channel_change(ELEVATOR); }
void rc_throttle_change() { rc_channel_change(THROTTLE); }
void rc_rudder_change()   { rc_channel_change(RUDDER);   }

void rc_setup_interrupts() {
  PCintPort::attachInterrupt(rc_pins[AILERON],  &rc_aileron_change, CHANGE);        // Attaching the PWM pins to work as Pin change Interrupt
  PCintPort::attachInterrupt(rc_pins[ELEVATOR], &rc_elevator_change, CHANGE);
  PCintPort::attachInterrupt(rc_pins[THROTTLE], &rc_throttle_change, CHANGE);
  PCintPort::attachInterrupt(rc_pins[RUDDER],   &rc_rudder_change, CHANGE);
}

  static uint8_t flags;
  
void rc_process_channels() {
  
  if (rc_shared_flags) {
   noInterrupts();
    flags = rc_shared_flags;
    
    if (flags & rc_flags[0]) rc_values[0] = rc_shared_values[0];
    if (flags & rc_flags[1]) rc_values[1] = rc_shared_values[1];
    if (flags & rc_flags[2]) rc_values[2] = rc_shared_values[2];
    if (flags & rc_flags[3]) rc_values[3] = rc_shared_values[3];
    rc_shared_flags = 0;
    interrupts(); 
  }

  flags = 0;
}

#ifdef DEBUG_RECEIVER
void rc_print_channels() {
  static char str[64];
 
  sprintf(str, "AILE: %d, ELEV: %d, THRO: %d, RUDD: %d    \n",
    rc_values[0], rc_values[1], rc_values[2], rc_values[3]
  );
 
  Serial.print(str); 
}
#endif

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int motorCommand[4] = {0,0,0,0};          //to send signal to the motors

#define MOTOR1 0
#define MOTOR2 1
#define MOTOR3 2
#define MOTOR4 3

#define FRONT MOTOR1
#define REAR  MOTOR2
#define RIGHT MOTOR3
#define LEFT  MOTOR4

#define MOTOR0PIN    2
#define MOTOR1PIN    4
#define MOTOR2PIN    5
#define MOTOR3PIN    6

int throttle = 1000; //Least Throtlle Value Transmitted


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
float angles[6]; // yaw pitch roll

// Set the FreeSixIMU object
FreeSixIMU sixDOF = FreeSixIMU();

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void initializePID(void){
  PID[RATE_XAXIS_PID_IDX].P = 92.0;
  PID[RATE_XAXIS_PID_IDX].I = 15.0;
  PID[RATE_XAXIS_PID_IDX].D = -15.0;
  PID[RATE_XAXIS_PID_IDX].windupGuard = 200;
  PID[RATE_YAXIS_PID_IDX].P = 92.0;
  PID[RATE_YAXIS_PID_IDX].I = 15.0;
  PID[RATE_YAXIS_PID_IDX].D = -15.0;
  PID[RATE_YAXIS_PID_IDX].windupGuard = 200;
  PID[ZAXIS_PID_IDX].P = 110.0;
  PID[ZAXIS_PID_IDX].I = 0.0;
  PID[ZAXIS_PID_IDX].D = 0.0;
  PID[ZAXIS_PID_IDX].windupGuard = 200;
  PID[ATTITUDE_XAXIS_PID_IDX].P = 3.5;
  PID[ATTITUDE_XAXIS_PID_IDX].I = 0.0;
  PID[ATTITUDE_XAXIS_PID_IDX].D = 0.0;
  PID[ATTITUDE_XAXIS_PID_IDX].windupGuard = 0.375;
  PID[ATTITUDE_YAXIS_PID_IDX].P = 3.5;
  PID[ATTITUDE_YAXIS_PID_IDX].I = 0.0;
  PID[ATTITUDE_YAXIS_PID_IDX].D = 0.0;
  PID[ATTITUDE_XAXIS_PID_IDX].windupGuard = 0.375;
  PID[ATTITUDE_GYRO_XAXIS_PID_IDX].P = 40.0;
  PID[ATTITUDE_GYRO_XAXIS_PID_IDX].I = 0.0;
  PID[ATTITUDE_GYRO_XAXIS_PID_IDX].D = -0.0;
  PID[ATTITUDE_GYRO_XAXIS_PID_IDX].windupGuard = 200;
  PID[ATTITUDE_GYRO_YAXIS_PID_IDX].P = 40.0;
  PID[ATTITUDE_GYRO_YAXIS_PID_IDX].I = 0.0;
  PID[ATTITUDE_GYRO_YAXIS_PID_IDX].D = -0.0;
  PID[ATTITUDE_GYRO_YAXIS_PID_IDX].windupGuard = 200;


}


float updatePID(float targetPosition, float currentPosition, struct PIDdata *PIDparameters) 
{
  const float deltaPIDTime = (currentTime - PIDparameters->previousPIDTime) / 1000000.0;
 
  PIDparameters->previousPIDTime = currentTime;
  float error = targetPosition - currentPosition;
 
  if (inFlight) {
    PIDparameters->integratedError += error * deltaPIDTime;
  }
  else {
    PIDparameters->integratedError = 0.0;
  }

  PIDparameters->integratedError = constrain(PIDparameters->integratedError, -PIDparameters->windupGuard, PIDparameters->windupGuard);
  float dTerm = PIDparameters->D * (currentPosition - PIDparameters->lastError) / (deltaPIDTime * 100);
  
  PIDparameters->lastError = currentPosition;
  return (PIDparameters->P * error) + (PIDparameters->I * PIDparameters->integratedError) + dTerm;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

void calculateFlightError()    {  /*Update PID Output    updatePID(Target Position,Current Position,PID Parameters)*/     
   
    float tposition = rc_values[0] - receiverZero[XAXIS];
    float rollAttitudeCmd  = updatePID((rc_values[0] - receiverZero[XAXIS]) * ATTITUDE_SCALING, angles[1]*M_PI/180, &PID[ATTITUDE_XAXIS_PID_IDX]);
    float pitchAttitudeCmd = updatePID((rc_values[1] - receiverZero[YAXIS]) * ATTITUDE_SCALING, -angles[2]*M_PI/1802, &PID[ATTITUDE_YAXIS_PID_IDX]);
   // Serial.print("  Roll  ");Serial.print(rollAttitudeCmd);Serial.println("   ");
    motorAxisCommandRoll   = updatePID(rollAttitudeCmd, -angles[4]*M_PI/180, &PID[ATTITUDE_GYRO_XAXIS_PID_IDX]);
    motorAxisCommandPitch  = updatePID(pitchAttitudeCmd,  angles[3]*M_PI/180, &PID[ATTITUDE_GYRO_YAXIS_PID_IDX]);
    motorAxisCommandYaw    = updatePID((rc_values[3] - receiverZero[ZAXIS])/100,  angles[5]*M_PI/180, &PID[ZAXIS_PID_IDX]);
    //Serial.print(" Yaw ");Serial.print(motorAxisCommandYaw);
  //  Serial.print("  Roll  ");Serial.print(motorAxisCommandRoll);Serial.println("   ");
}

void applyMotorCommand() {
  
  throttle = rc_values[THROTTLE];
  motorCommand[FRONT] = throttle - motorAxisCommandPitch + (YAW_DIRECTION * motorAxisCommandYaw);
  motorCommand[REAR] =  throttle + motorAxisCommandPitch + (YAW_DIRECTION * motorAxisCommandYaw);
  motorCommand[RIGHT] = throttle - motorAxisCommandRoll  - (YAW_DIRECTION * motorAxisCommandYaw);
  motorCommand[LEFT] =  throttle + motorAxisCommandRoll  - (YAW_DIRECTION * motorAxisCommandYaw);
  
   for(int num=0; num<4; num++) {
         motorCommand[num]=constrain(motorCommand[num],1100,1900);
       }
    //  Serial.print("Throttle:");Serial.print(throttle);Serial.print("        ");
    //  Serial.print(motorCommand[FRONT]); Serial.print("  ");Serial.print(motorCommand[REAR]);Serial.print("   ");Serial.print(motorCommand[RIGHT]);Serial.print("   ");Serial.print(motorCommand[LEFT]);Serial.print("   ");
}

void write_Motors()    {                                        //Change this if not working with a PPM signal
  motor[MOTOR1].writeMicroseconds(motorCommand[FRONT]);
  motor[MOTOR2].writeMicroseconds(motorCommand[REAR]);
  motor[MOTOR3].writeMicroseconds(motorCommand[RIGHT]);
  motor[MOTOR4].writeMicroseconds(motorCommand[LEFT]);
}


void processTask() {

  calculateFlightError();
  applyMotorCommand(); 
  write_Motors();                  
}


void arm()    {                                                // Attach the Motors to the PWM pins
 
      motor[MOTOR1].attach(MOTOR0PIN,1100,1900);
      motor[MOTOR2].attach(MOTOR1PIN,1100,1900);
      motor[MOTOR3].attach(MOTOR2PIN,1100,1900);
      motor[MOTOR4].attach(MOTOR3PIN,1100,1900);
Serial.print("Motors Arrmed");
}

void setstate() {
          if(rc_values[2]<1125) {
               if(rc_values[0]<1300) {
                     flag=1;
                  }
                if(rc_values[0]>1800) {
                     flag=0;
                  }
             }
    }
 
void setup() {
  
  Wire.begin();
  
  delay(5);
  sixDOF.init(); //begin the IMU
  delay(5);
/////////////////////////////////////////////////////////////////////////////////////   

  previousTime = micros();
  #ifdef DEBUG_RECEIVER
  Serial.begin(9600);                                    // With the system
  #endif
  rc_setup_interrupts();
  delay(1000);
  Serial.begin(115200);
  //Serial.println("Start the system...");
  arm();
  pinMode(39,OUTPUT);
  digitalWrite(39, HIGH);
    delay(3000);
  
 // Serial.println("Start loop...");
 initializePID();
      
}

void loop()
{
  //delay(4);
  digitalWrite(39,LOW);
 #ifdef DEBUG_RECEIVER
    rc_process_channels();
    rc_print_channels();
    
    currentTime = micros();
    deltaTime = currentTime - previousTime;
    previousTime = currentTime;
    
    // if (deltaTime >= 10000)  {
     sixDOF.getEuler(angles);
     sixDOF.gyro.readGyro(angles+3);
     setstate();
     Serial.print(" Flag: ");Serial.print( flag );

      if(flag==1)  {
          processTask();
         }
      else  {
           motor[MOTOR1].writeMicroseconds(1100);
           motor[MOTOR2].writeMicroseconds(1100);
           motor[MOTOR3].writeMicroseconds(1100);
           motor[MOTOR4].writeMicroseconds(1100);
         }
     
     //Serial.println(deltaTime/1000);
 //  }   
  #endif  
   /* Serial.print("Angles:");
 
  Serial.print(motorAxisCommandRoll);Serial.print(" | ");
  Serial.print(motorAxisCommandPitch);Serial.print(" | ");
  Serial.print(motorAxisCommandYaw);Serial.print("            ");
  Serial.print(PID[RATE_XAXIS_PID_IDX].P);Serial.print(" | ");
  Serial.print(PID[RATE_XAXIS_PID_IDX].lastError);Serial.print(" | ");
  Serial.print(PID[RATE_XAXIS_PID_IDX].previousPIDTime);Serial.print(" | ");
  Serial.print(PID[RATE_XAXIS_PID_IDX].integratedError);Serial.print(" | ");
  Serial.print(PID[RATE_XAXIS_PID_IDX].windupGuard);Serial.println("");*/
/*  Serial.print(angles[0]* M_PI/180);Serial.print(" | ");  
  Serial.print(angles[1]* M_PI/180);Serial.print(" | ");
  Serial.print(angles[2]* M_PI/180);Serial.print(" | ");
  Serial.print(angles[3]* M_PI/180);Serial.print(" | ");
  Serial.print(angles[4]* M_PI/180);Serial.print(" | ");
  Serial.println(angles[5]* M_PI/180);*/
}
